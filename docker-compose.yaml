services:
  api:
    image: evoapicloud/evolution-api:latest
    restart: always
    depends_on:
      - redis
      - evolution-postgres
    volumes:
      - evolution_instances:/evolution/instances
    networks:
      - default          # project's own bridge network (auto)
      - coolify          # Coolify/Traefik external proxy network

    # Keep these so you can manage secrets in Coolify UI.
    # Even if the image loads its own .env, this won't break anything.
    environment:
      AUTHENTICATION_API_KEY: "your_long_random_key_here"
      DATABASE_ENABLED: "true"
      DATABASE_PROVIDER: "postgresql"
      # OK to keep; if the image's internal .env points to "postgres",
      # we also make that hostname resolve to our DB below.
      DATABASE_URL: "postgresql://evolution:HSwYWENGkr6jzfHayl9ulTFAveZjBVBb4Pvs4GC3RdD5yOvbrwi8FgimvsLw5taT@postgresql-database-tswos8s0g84ks08400ggk8c0:5432/postgres"
      REDIS_URI: "redis://redis:6379"
      SERVICE_FQDN_API: "https://evoapi.growthgrid.me"
      PORT: "8080"

    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=coolify"

      # Service (container internal port)
      - "traefik.http.services.evoapi-svc.loadbalancer.server.port=8080"

      # HTTPS router (Coolify v4 uses 'http' / 'https' entry points)
      - "traefik.http.routers.evoapi-https.rule=Host(`evoapi.growthgrid.me`)"
      - "traefik.http.routers.evoapi-https.entryPoints=https"
      - "traefik.http.routers.evoapi-https.tls=true"
      - "traefik.http.routers.evoapi-https.tls.certresolver=letsencrypt"
      - "traefik.http.routers.evoapi-https.service=evoapi-svc"

      # HTTP â†’ HTTPS redirect
      - "traefik.http.middlewares.evoapi-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.evoapi-http.rule=Host(`evoapi.growthgrid.me`)"
      - "traefik.http.routers.evoapi-http.entryPoints=http"
      - "traefik.http.routers.evoapi-http.middlewares=evoapi-redirect"
      - "traefik.http.routers.evoapi-http.service=evoapi-svc"

  redis:
    image: redis:latest
    restart: always
    command: >
      redis-server --port 6379 --appendonly yes
    volumes:
      - evolution_redis:/data
    networks:
      - default
    labels:
      - "traefik.enable=false"

  evolution-postgres:
    image: postgres:15
    restart: always
    # IMPORTANT: remove env_file so nothing overrides these values
    # env_file:
    #   - .env
    command: ["postgres","-c","max_connections=1000","-c","listen_addresses=*"]
    environment:
      # Match what Prisma expects: database "evolution_db", user "evolution"
      POSTGRES_DB: evolution_db
      POSTGRES_USER: evolution
      POSTGRES_PASSWORD: HSwYWENGkr6jzfHayl9ulTFAveZjBVBb4Pvs4GC3RdD5yOvbrwi8FgimvsLw5taT
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      default:
        aliases:
          # This makes the hostname "postgres" resolve to THIS container,
          # so if the image's .env points to postgres:5432 it will connect here.
          - postgres
    labels:
      - "traefik.enable=false"

volumes:
  evolution_instances:
  evolution_redis:
  postgres_data:

networks:
  coolify:
    external: true
    name: coolify
